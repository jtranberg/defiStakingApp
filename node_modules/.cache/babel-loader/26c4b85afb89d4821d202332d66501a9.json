{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defiStakingApp\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defiStakingApp\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defiStakingApp\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defiStakingApp\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defiStakingApp\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defiStakingApp\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defiStakingApp\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\desktop\\\\defiStakingApp\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport { Main } from 'react-tsparticles';\nimport Main1 from './Main1.js';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, tetherData, tether, rwdBalance, rwdData, _rwd, _rwdBalance, decentralBankData, decentralBank, stakingBalance;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context2.sent;\n                // load tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context2.next = 15;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                rwdBalance = _context2.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                _context2.next = 20;\n                break;\n\n              case 19:\n                window.alert(\"rwd contract not deplyed - network not deployed\");\n\n              case 20:\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                _rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: _rwd\n                });\n                _context2.next = 26;\n                return _rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                _rwdBalance = _context2.sent;\n                this.setState({\n                  rwdBalance: _rwdBalance.toString()\n                });\n                _context2.next = 31;\n                break;\n\n              case 30:\n                window.alert(\"rwd contract not deplyed - network not deployed\");\n\n              case 31:\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context2.next = 41;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context2.next = 37;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 37:\n                stakingBalance = _context2.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                _context2.next = 42;\n                break;\n\n              case 41:\n                window.alert(\"Decentral Bank contract not deplyed - network not deployed\");\n\n              case 42:\n                this.setState({\n                  loading: false\n                });\n\n              case 43:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No Etheruem browser, check metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rdw: {},\n      decenttralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  } // react code goes here\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      // let content\n      // this.state.loading ?  content =\n      // <p id='loader' className='text-center' style={{margin:'30px'}}>\n      //  LOADING PLEASE ...</p> : content = \n      //  <Main1 />\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        classname: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Main1, {\n        tetherBalance: this.state.tetherBalance,\n        rwdBalance: this.state.rwdBalance,\n        stakingBalance: this.state.stakingBalance,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }\n      }))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/pc/desktop/defiStakingApp/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","Main1","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","tetherData","networks","tether","Contract","abi","rwdData","address","rwd","methods","balanceOf","state","call","rwdBalance","toString","alert","decentralBankData","decentralBank","stakingBalance","loading","ethereum","enable","web","currentProvider","props","rdw","decenttralBank","tetherBalance","maxWidth","minHeight"],"mappings":"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","sourcesContent":["\r\nimport React, {Component} from 'react'\r\nimport './App.css'\r\nimport Navbar from './Navbar'\r\nimport Web3 from 'web3'\r\nimport Tether from '../truffle_abis/Tether.json'\r\nimport RWD from '../truffle_abis/RWD.json'\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\r\nimport { Main } from 'react-tsparticles'\r\nimport Main1 from './Main1.js'\r\n\r\nclass App extends Component {\r\n\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n    }\r\n\r\n\r\n       async loadBlockchainData() {\r\n            const web3 = window.web3\r\n            const accounts = await web3.eth.getAccounts()\r\n            console.log(accounts)\r\n            this.setState({account:accounts[0]})\r\n            const networkId = await web3.eth.net.getId()\r\n           \r\n            // load tether contract\r\n            const tetherData = Tether.networks[networkId]\r\n              if(tetherData) {\r\n                const tether = new web3.eth.Contract(Tether.abi, rwdData.address)\r\n                this.setState({rwd})\r\n                 let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n                 this.setState({rwdBalance: rwdBalance.toString() })\r\n              }else {\r\n                window.alert(\"rwd contract not deplyed - network not deployed\")\r\n              }\r\n\r\n\r\n            const rwdData = RWD.networks[networkId]\r\n              if(rwdData) {\r\n                const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\r\n                this.setState({rwd})\r\n                 let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n                 this.setState({rwdBalance: rwdBalance.toString() })\r\n              }else {\r\n                window.alert(\"rwd contract not deplyed - network not deployed\")\r\n              }\r\n\r\n\r\n            const decentralBankData = DecentralBank.networks[networkId]\r\n              if(decentralBankData) {\r\n                const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n                this.setState({decentralBank})\r\n                 let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n                 this.setState({stakingBalance: stakingBalance.toString() })\r\n                 }else {\r\n                window.alert(\"Decentral Bank contract not deplyed - network not deployed\")\r\n              }\r\n\r\n              this.setState({loading:false})\r\n        }\r\n        \r\n        async loadWeb3() {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } else if(window.web) {\r\n            window.web3 =new Web3(window.web3.currentProvider)\r\n            } else {\r\n                window.alert('No Etheruem browser, check metamask!')\r\n            }\r\n        }\r\n\r\n    constructor(props) {\r\n       super(props)\r\n       this.state = {\r\n           account: '0x0',\r\n           tether:{},\r\n           rdw:{},\r\n           decenttralBank:{},\r\n           tetherBalance:'0',\r\n           rwdBalance:'0',\r\n           stakingBalance:'0',\r\n           loading: true\r\n\r\n       }\r\n    }\r\n    // react code goes here\r\n    render() {\r\n      // let content\r\n      // this.state.loading ?  content =\r\n      // <p id='loader' className='text-center' style={{margin:'30px'}}>\r\n      //  LOADING PLEASE ...</p> : content = \r\n      //  <Main1 />\r\n        return(\r\n           <div>\r\n            <Navbar account={this.state.account}/>\r\n                <div className='container-fluid mt-5'>\r\n                  <div classname=\"row\">\r\n                      <main role='main' className='col-lg-12 ml-auto mr-auto'style={{maxWidth: '600px', minHeight:'100vm'}}>\r\n                         <div>\r\n                            <Main1 tetherBalance={this.state.tetherBalance}\r\n                                   rwdBalance={this.state.rwdBalance}\r\n                                   stakingBalance={this.state.stakingBalance}/>\r\n                         </div>\r\n                      </main>\r\n                  </div>\r\n                </div>\r\n           </div>\r\n           \r\n\r\n       )\r\n    }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}