{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defi staking app\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defi staking app\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defi staking app\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defi staking app\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defi staking app\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defi staking app\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\pc\\\\Desktop\\\\defi staking app\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\defi staking app\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No Etheruem browser, check metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankDATA, _decentralBankData, stakingBalance;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // load tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  teherBalance: tetherBalance.toString()\n                });\n                _context3.next = 19;\n                break;\n\n              case 18:\n                window.alert(\"teher contract not deplyed - network not deployed\");\n\n              case 19:\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 25;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 25:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert(\"rwd contract not deplyed - network not deployed\");\n\n              case 30:\n                decentralBankDATA = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 41;\n                  break;\n                }\n\n                _decentralBankData = new web3.eth.Contract(DecentralBank.abi, _decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 36;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 36:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log({\n                  stakingBalance: stakingBalance\n                });\n                _context3.next = 42;\n                break;\n\n              case 41:\n                window.alert(\"Decentral Bank contract not deplyed - network not deployed\");\n\n              case 42:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rdw: {},\n      decenttralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  } // react code goes here\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 16\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/pc/Desktop/defi staking app/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","web","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","teherBalance","toString","rwdData","rwd","rwdBalance","decentralBankDATA","decentralBankData","decentralBank","stakingBalance","console","log","props","rdw","decenttralBank","loading"],"mappings":";;;;;;;;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;;IAGMC,G;;;;;;;;;;;;uBAEQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;qBAIHC,MAAM,CAACC,Q;;;;;AACND,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIT,IAAJ,CAASO,MAAM,CAACC,QAAhB,CAAd;;uBACMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AACH,oBAAGH,MAAM,CAACI,GAAV,EAAe;AAClBJ,kBAAAA,MAAM,CAACE,IAAP,GAAa,IAAIT,IAAJ,CAASO,MAAM,CAACE,IAAP,CAAYG,eAArB,CAAb;AACC,iBAFE,MAEI;AACHL,kBAAAA,MAAM,CAACM,KAAP,CAAa,sCAAb;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;AAGKJ,gBAAAA,I,GAAOF,MAAM,CAACE,I;;uBACEA,IAAI,CAACK,GAAL,CAASC,WAAT,E;;;AAAhBC,gBAAAA,O;AACN,qBAAKC,QAAL,CAAc;AAACD,kBAAAA,OAAO,EAACA,OAAO,CAAC,CAAD;AAAhB,iBAAd;;uBACwBP,IAAI,CAACK,GAAL,CAASI,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACP;AACOC,gBAAAA,U,GAAapB,MAAM,CAACqB,QAAP,CAAgBF,SAAhB,C;;qBACdC,U;;;;;AACKE,gBAAAA,M,GAAS,IAAId,IAAI,CAACK,GAAL,CAASU,QAAb,CAAsBvB,MAAM,CAACwB,GAA7B,EAAkCJ,UAAU,CAACK,OAA7C,C;AACf,qBAAKT,QAAL,CAAc;AAACM,kBAAAA,MAAM,EAANA;AAAD,iBAAd;;uBAC2BA,MAAM,CAACI,OAAP,CAAeC,SAAf,CAAyB,KAAKC,KAAL,CAAWb,OAApC,EAA6Cc,IAA7C,E;;;AAAtBC,gBAAAA,a;AACJ,qBAAKd,QAAL,CAAc;AAACe,kBAAAA,YAAY,EAAED,aAAa,CAACE,QAAd;AAAf,iBAAd;;;;;AAED1B,gBAAAA,MAAM,CAACM,KAAP,CAAa,mDAAb;;;AAEIqB,gBAAAA,O,GAAUhC,GAAG,CAACoB,QAAJ,CAAaF,SAAb,C;;qBACbc,O;;;;;AACKC,gBAAAA,G,GAAM,IAAI1B,IAAI,CAACK,GAAL,CAASU,QAAb,CAAsBtB,GAAG,CAACuB,GAA1B,EAA+BS,OAAO,CAACR,OAAvC,C;AACZ,qBAAKT,QAAL,CAAc;AAACkB,kBAAAA,GAAG,EAAHA;AAAD,iBAAd;;uBACwBA,GAAG,CAACR,OAAJ,CAAYC,SAAZ,CAAsB,KAAKC,KAAL,CAAWb,OAAjC,EAA0Cc,IAA1C,E;;;AAAnBM,gBAAAA,U;AACJ,qBAAKnB,QAAL,CAAc;AAACmB,kBAAAA,UAAU,EAAEA,UAAU,CAACH,QAAX;AAAb,iBAAd;;;;;AAED1B,gBAAAA,MAAM,CAACM,KAAP,CAAa,iDAAb;;;AAEIwB,gBAAAA,iB,GAAoBlC,aAAa,CAACmB,QAAd,CAAuBF,SAAvB,C;;qBACvBkB,iB;;;;;AACKA,gBAAAA,kB,GAAoB,IAAI7B,IAAI,CAACK,GAAL,CAASU,QAAb,CAAsBrB,aAAa,CAACsB,GAApC,EAAyCa,kBAAiB,CAACZ,OAA3D,C;AAC1B,qBAAKT,QAAL,CAAc;AAACsB,kBAAAA,aAAa,EAAbA;AAAD,iBAAd;;uBAC4BA,aAAa,CAACZ,OAAd,CAAsBa,cAAtB,CAAqC,KAAKX,KAAL,CAAWb,OAAhD,EAAyDc,IAAzD,E;;;AAAvBU,gBAAAA,c;AACJ,qBAAKvB,QAAL,CAAc;AAACuB,kBAAAA,cAAc,EAAEA,cAAc,CAACP,QAAf;AAAjB,iBAAd;AACAQ,gBAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,kBAAAA,cAAc,EAAdA;AAAD,iBAAZ;;;;;AAEDjC,gBAAAA,MAAM,CAACM,KAAP,CAAa,4DAAb;;;;;;;;;;;;;;;;;;AAIZ,eAAY8B,KAAZ,EAAmB;AAAA;;AAAA;;AAChB,6EAAMA,KAAN;AACA,UAAKd,KAAL,GAAa;AACTb,MAAAA,OAAO,EAAE,KADA;AAETO,MAAAA,MAAM,EAAC,EAFE;AAGTqB,MAAAA,GAAG,EAAC,EAHK;AAITC,MAAAA,cAAc,EAAC,EAJN;AAKTd,MAAAA,aAAa,EAAC,GALL;AAMTK,MAAAA,UAAU,EAAC,GANF;AAOTI,MAAAA,cAAc,EAAC,GAPN;AAQTM,MAAAA,OAAO,EAAE;AARA,KAAb;AAFgB;AAalB,G,CACD;;;;;6BACS;AACL,0BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWb,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,eAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADH;AASH;;;;EA7EalB,S;;AA+ElB,eAAeM,GAAf","sourcesContent":["\r\nimport React, {Component} from 'react'\r\nimport './App.css'\r\nimport Navbar from './Navbar';\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/Tether.json'\r\nimport RWD from '../truffle_abis/RWD.json'\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\r\n\r\n\r\nclass App extends Component {\r\n    async UNSAFE_componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n    }\r\n\r\n    async loadWeb3() {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } else if(window.web) {\r\n            window.web3 =new Web3(window.web3.currentProvider)\r\n            } else {\r\n                window.alert('No Etheruem browser, check metamask!')\r\n            }\r\n        }\r\n        async loadBlockchainData() {\r\n            const web3 = window.web3\r\n            const account = await web3.eth.getAccounts()\r\n            this.setState({account:account[0]})\r\n            const networkId = await web3.eth.net.getId()\r\n           // load tether contract\r\n            const tetherData = Tether.networks[networkId]\r\n              if(tetherData) {\r\n                const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\r\n                this.setState({tether})\r\n                 let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\r\n                 this.setState({teherBalance: tetherBalance.toString() })\r\n              }else {\r\n                window.alert(\"teher contract not deplyed - network not deployed\")\r\n              }\r\n              const rwdData = RWD.networks[networkId]\r\n              if(rwdData) {\r\n                const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\r\n                this.setState({rwd})\r\n                 let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n                 this.setState({rwdBalance: rwdBalance.toString() })\r\n              }else {\r\n                window.alert(\"rwd contract not deplyed - network not deployed\")\r\n              }\r\n              const decentralBankDATA = DecentralBank.networks[networkId]\r\n              if(decentralBankData) {\r\n                const decentralBankData = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n                this.setState({decentralBank})\r\n                 let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n                 this.setState({stakingBalance: stakingBalance.toString() })\r\n                 console.log({stakingBalance})\r\n              }else {\r\n                window.alert(\"Decentral Bank contract not deplyed - network not deployed\")\r\n              }\r\n        }\r\n\r\n    constructor(props) {\r\n       super(props)\r\n       this.state = {\r\n           account: '0x0',\r\n           tether:{},\r\n           rdw:{},\r\n           decenttralBank:{},\r\n           tetherBalance:'0',\r\n           rwdBalance:'0',\r\n           stakingBalance:'0',\r\n           loading: true\r\n\r\n       }\r\n    }\r\n    // react code goes here\r\n    render() {\r\n        return(\r\n           <div>\r\n            <Navbar account={this.state.account}/>\r\n               <div className='text-center'>\r\n               </div>\r\n           </div>\r\n           \r\n\r\n       )\r\n    }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}